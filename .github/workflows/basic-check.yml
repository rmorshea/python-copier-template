env: {latest-python-version: 3.13}
jobs:
  py-build:
    runs-on: ubuntu-latest
    steps:
    - {uses: actions/checkout@v4}
    - name: UV cache
      uses: actions/cache@v4
      with: {key: "${{ runner.os }}-${{ env.latest-python-version }}-uv-${{ hashFiles('pyproject.toml')
          }}", path: ~/.cache/uv}
    - {name: Install UV, run: curl -LsSf https://astral.sh/uv/install.sh | sh, working-directory: samples/basic}
    - {name: Install Python, run: 'uv python install ${{ matrix.python-version }}',
      working-directory: samples/basic}
    - {name: Check lint, run: uv build, working-directory: samples/basic}
  py-coverage:
    if: github.ref != format('refs/heads/{0}', github.event.repository.default_branch)
    needs: py-tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: {fetch-depth: 50}
    - name: UV cache
      uses: actions/cache@v4
      with: {key: "${{ runner.os }}-${{ env.latest-python-version }}-uv-${{ hashFiles('pyproject.toml')
          }}", path: ~/.cache/uv}
    - name: Download old coverage
      uses: dawidd6/action-download-artifact@v6
      with: {branch: '${{ github.event.pull_request.base.ref }}', name: coverage-xml,
        path: old-coverage}
    - name: Download new coverage
      uses: actions/download-artifact@v4
      with: {name: coverage-xml}
    - {run: git fetch origin main, working-directory: samples/basic}
    - {name: Install UV, run: curl -LsSf https://astral.sh/uv/install.sh | sh, working-directory: samples/basic}
    - {name: Install Python, run: 'uv python install ${{ matrix.python-version }}',
      working-directory: samples/basic}
    - {name: Check coverage, run: 'uv run project.py cov --no-test --old-coverage-xml=${{
        github.workspace }}/old-coverage/coverage.xml', working-directory: samples/basic}
  py-lint:
    runs-on: ubuntu-latest
    steps:
    - {uses: actions/checkout@v4}
    - name: UV cache
      uses: actions/cache@v4
      with: {key: "${{ runner.os }}-${{ env.latest-python-version }}-uv-${{ hashFiles('pyproject.toml')
          }}", path: ~/.cache/uv}
    - {name: Install UV, run: curl -LsSf https://astral.sh/uv/install.sh | sh, working-directory: samples/basic}
    - {name: Install Python, run: 'uv python install ${{ matrix.python-version }}',
      working-directory: samples/basic}
    - {name: Check lint, run: uv run project.py lint --check, working-directory: samples/basic}
  py-tests:
    runs-on: ubuntu-latest
    steps:
    - {uses: actions/checkout@v4}
    - name: UV cache
      uses: actions/cache@v4
      with: {key: "${{ runner.os }}-${{ matrix.python-version }}-uv-${{ hashFiles('pyproject.toml')
          }}", path: ~/.cache/uv}
    - {name: Install UV, run: curl -LsSf https://astral.sh/uv/install.sh | sh, working-directory: samples/basic}
    - {name: Install Python, run: 'uv python install ${{ matrix.python-version }}',
      working-directory: samples/basic}
    - {name: Run tests, run: uv run project.py cov, working-directory: samples/basic}
    - if: matrix.python-version == env.latest-python-version
      name: Upload coverage
      uses: actions/upload-artifact@v4
      with: {include-hidden-files: true, name: coverage-xml, path: '${{ github.workspace
          }}/coverage.xml'}
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
name: basic-check
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
